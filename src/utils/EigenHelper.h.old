/*
  RTQL8, Copyright (c) 2011 Georgia Tech Graphics Lab
  All rights reserved.

  Author	Sehoon Ha
  Date		06/12/2011
*/

#ifndef UTILS_EIGEN_HELPER_H
#define UTILS_EIGEN_HELPER_H

#include <Eigen/Dense>

#define EIGEN_V_VEC2D std::vector< Eigen::Vector2d, Eigen::aligned_allocator<Eigen::Vector2d> >
#define EIGEN_V_VEC3D std::vector< Eigen::Vector3d >
#define EIGEN_V_VEC4D std::vector< Eigen::Vector4d, Eigen::aligned_allocator<Eigen::Vector4d> >

#define EIGEN_V_MAT2D std::vector< Eigen::Matrix2d, Eigen::aligned_allocator<Eigen::Matrix2d> >
#define EIGEN_V_MAT3D std::vector< Eigen::Matrix3d >
#define EIGEN_V_MAT4D std::vector< Eigen::Matrix4d, Eigen::aligned_allocator<Eigen::Matrix4d> >

#define EIGEN_VV_VEC2D std::vector< std::vector< Eigen::Vector2d, Eigen::aligned_allocator<Eigen::Vector2d> > >
#define EIGEN_VV_VEC3D std::vector< std::vector< Eigen::Vector3d > >
#define EIGEN_VV_VEC4D std::vector< std::vector< Eigen::Vector4d, Eigen::aligned_allocator<Eigen::Vector4d> > >

#define EIGEN_VV_MAT2D std::vector< std::vector< Eigen::Matrix2d, Eigen::aligned_allocator<Eigen::Matrix2d> > >
#define EIGEN_VV_MAT3D std::vector< std::vector< Eigen::Matrix3d > >
#define EIGEN_VV_MAT4D std::vector< std::vector< Eigen::Matrix4d, Eigen::aligned_allocator<Eigen::Matrix4d> > >

#define EIGEN_V_QUATD std::vector< Eigen::Quaterniond, Eigen::aligned_allocator<Eigen::Quaterniond > >
#define EIGEN_VV_QUATD std::vector< std::vector< Eigen::Quaterniond, Eigen::aligned_allocator<Eigen::Quaterniond> > >

namespace eigenhelper {
    //template <typename Derived>
    //    Eigen::Block<Derived> sub(const Eigen::DenseBase<Derived>& b, int rows, int cols) {
    //    return const_cast< Eigen::DenseBase<Derived>& >(b).topLeftCorner(rows, cols);
    //}

    //template <typename Derived>
    //    Eigen::Block<Derived> sub(const Eigen::DenseBase<Derived>& b,
    //                       int top, int left, int height, int width) {
    //    return const_cast< Eigen::DenseBase<Derived>& >(b).block(top, left, height, width);
    //}


    //template <typename Derived>
    //    Eigen::Block<Derived, Eigen::internal::traits<Derived>::RowsAtCompileTime, 1, true> col(
    //        const Eigen::DenseBase<Derived>& b, int col_index) {
    //    return const_cast< Eigen::DenseBase<Derived>& >(b).col(col_index);
    //}
    //
    //template <typename Derived>
    //    Eigen::Block<Derived, 1, Eigen::internal::traits<Derived>::ColsAtCompileTime, false> row(
    //        const Eigen::DenseBase<Derived>& b, int col_index) {
    //    return const_cast< Eigen::DenseBase<Derived>& >(b).col(col_index);
    //}


    //template <typename Derived>
    //    Eigen::Transpose<Derived> trans(const Eigen::DenseBase<Derived>& b) {
    //    return const_cast< Eigen::DenseBase<Derived>& >(b).transpose();
    //}

    //template <typename Derived>
    //    Eigen::VectorBlock<Derived> first(const Eigen::DenseBase<Derived>& v, int n_elts) {
    //    return const_cast< Eigen::DenseBase<Derived>& >(v).head(n_elts);
    //}

    //template <typename Derived>
    //    Eigen::VectorBlock<Derived> last(const Eigen::DenseBase<Derived>& v, int n_elts) {
    //    return const_cast< Eigen::DenseBase<Derived>& >(v).tail(n_elts);
    //}

    Eigen::Vector3d xform(const Eigen::Matrix4d& m, const Eigen::Vector3d& v);
  
} // namespace eigenhelper

#endif // #ifndef UTILS_EIGEN_HELPER_H

