# https://help.github.com/en/articles/workflow-syntax-for-github-actions

name: C/C++ CI

on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - '*'
  schedule:
    # Run every day at 02:00
    - cron: '0 2 * * 0-6'

jobs:
  xenial_gcc_release:
    name: Ubuntu 16.04 [GCC|Release]
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v1
    - name: Install Dependencies
      env:
        COMPILER: gcc
        DOCKERFILE: Dockerfile.ubuntu-xenial
        BUILD_TYPE: Release
      run: |
        docker build -t "${DOCKERFILE,,}" -f ".ci/docker/$DOCKERFILE" .;
        docker run -itd -v $GITHUB_WORKSPACE:$GITHUB_WORKSPACE --env-file ./.ci/docker/env.list --name dart-docker "${DOCKERFILE,,}";
        docker exec dart-docker /bin/sh -c "cd $GITHUB_WORKSPACE && ./.ci/install.sh";
    - name: Build
      run: |
        docker exec dart-docker /bin/sh -c "cd $GITHUB_WORKSPACE && ./.ci/script.sh";

  bionic_gcc_release:
    name: Ubuntu 18.04 [GCC|Release]
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v1
    - name: Install Dependencies
      env:
        COMPILER: gcc
        DOCKERFILE: Dockerfile.ubuntu-bionic
        BUILD_TYPE: Release
      run: |
        docker build -t "${DOCKERFILE,,}" -f ".ci/docker/$DOCKERFILE" .;
        docker run -itd -v $GITHUB_WORKSPACE:$GITHUB_WORKSPACE --env-file ./.ci/docker/env.list --name dart-docker "${DOCKERFILE,,}";
        docker exec dart-docker /bin/sh -c "cd $GITHUB_WORKSPACE && ./.ci/install.sh";
    - name: Build
      run: |
        docker exec dart-docker /bin/sh -c "cd $GITHUB_WORKSPACE && ./.ci/script.sh";

  bionic_gcc_dartpy_release:
    name: Ubuntu 18.04 [GCC|dartpy|Release]
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v1
    - name: Install Dependencies
      env:
        COMPILER: gcc
        DOCKERFILE: Dockerfile.ubuntu-bionic
        BUILD_DARTPY: ON
        BUILD_TYPE: Release
      run: |
        docker build -t "${DOCKERFILE,,}" -f ".ci/docker/$DOCKERFILE" .;
        docker run -itd -v $GITHUB_WORKSPACE:$GITHUB_WORKSPACE --env-file ./.ci/docker/env.list --name dart-docker "${DOCKERFILE,,}";
        docker exec dart-docker /bin/sh -c "cd $GITHUB_WORKSPACE && ./.ci/install.sh";
    - name: Build
      run: |
        docker exec dart-docker /bin/sh -c "cd $GITHUB_WORKSPACE && ./.ci/script.sh";

  eoan_gcc_release:
    name: Ubuntu 19.10 [GCC|Release]
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v1
    - name: Install Dependencies
      env:
        COMPILER: gcc
        DOCKERFILE: Dockerfile.ubuntu-eoan
        BUILD_TYPE: Release
      run: |
        docker build -t "${DOCKERFILE,,}" -f ".ci/docker/$DOCKERFILE" .;
        docker run -itd -v $GITHUB_WORKSPACE:$GITHUB_WORKSPACE --env-file ./.ci/docker/env.list --name dart-docker "${DOCKERFILE,,}";
        docker exec dart-docker /bin/sh -c "cd $GITHUB_WORKSPACE && ./.ci/install.sh";
    - name: Build
      run: |
        docker exec dart-docker /bin/sh -c "cd $GITHUB_WORKSPACE && ./.ci/script.sh";

  eoan_gcc_dartpy_release:
    name: Ubuntu 19.10 [GCC|dartpy|Release]
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v1
    - name: Install Dependencies
      env:
        COMPILER: gcc
        DOCKERFILE: Dockerfile.ubuntu-eoan
        BUILD_DARTPY: ON
        BUILD_TYPE: Release
      run: |
        docker build -t "${DOCKERFILE,,}" -f ".ci/docker/$DOCKERFILE" .;
        docker run -itd -v $GITHUB_WORKSPACE:$GITHUB_WORKSPACE --env-file ./.ci/docker/env.list --name dart-docker "${DOCKERFILE,,}";
        docker exec dart-docker /bin/sh -c "cd $GITHUB_WORKSPACE && ./.ci/install.sh";
    - name: Build
      run: |
        docker exec dart-docker /bin/sh -c "cd $GITHUB_WORKSPACE && ./.ci/script.sh";

  focal_gcc_release:
    name: Ubuntu 20.04 [GCC|Release]
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v1
    - name: Install Dependencies
      env:
        COMPILER: gcc
        DOCKERFILE: Dockerfile.ubuntu-focal
        BUILD_TYPE: Release
      run: |
        docker build -t "${DOCKERFILE,,}" -f ".ci/docker/$DOCKERFILE" .;
        docker run -itd -v $GITHUB_WORKSPACE:$GITHUB_WORKSPACE --env-file ./.ci/docker/env.list --name dart-docker "${DOCKERFILE,,}";
        docker exec dart-docker /bin/sh -c "cd $GITHUB_WORKSPACE && ./.ci/install.sh";
    - name: Build
      run: |
        docker exec dart-docker /bin/sh -c "cd $GITHUB_WORKSPACE && ./.ci/script.sh";

  focal_gcc_dartpy_release:
    name: Ubuntu 20.04 [GCC|dartpy|Release]
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v1
    - name: Install Dependencies
      env:
        COMPILER: gcc
        DOCKERFILE: Dockerfile.ubuntu-focal
        BUILD_DARTPY: ON
        BUILD_TYPE: Release
      run: |
        docker build -t "${DOCKERFILE,,}" -f ".ci/docker/$DOCKERFILE" .;
        docker run -itd -v $GITHUB_WORKSPACE:$GITHUB_WORKSPACE --env-file ./.ci/docker/env.list --name dart-docker "${DOCKERFILE,,}";
        docker exec dart-docker /bin/sh -c "cd $GITHUB_WORKSPACE && ./.ci/install.sh";
    - name: Build
      run: |
        docker exec dart-docker /bin/sh -c "cd $GITHUB_WORKSPACE && ./.ci/script.sh";

  mojav_clang_release:
    name: macOS 10.15 [Clang|Release]
    runs-on: macOS-10.15
    steps:
    - uses: actions/checkout@v1
    - name: Install Dependencies
      env:
        COMPILER: clang
      run: .ci/install.sh
    - name: Build
      env:
        COMPILER: clang
        BUILD_TYPE: Release
      run: sudo -E .ci/script.sh

  mojav_clang_dartpy_release:
    name: macOS 10.15 [Clang|dartpy|Release]
    runs-on: macOS-10.15
    steps:
    - uses: actions/checkout@v1
    - name: Install Dependencies
      env:
        COMPILER: clang
        BUILD_DARTPY: ON
      run: .ci/install.sh
    - name: Build
      env:
        COMPILER: clang
        BUILD_TYPE: Release
        BUILD_DARTPY: ON
      run: sudo -E .ci/script.sh

  windows_2019:
    name: Windows [Release]
    runs-on: windows-2019
    steps:
    - uses: actions/checkout@v1
    - name: Install Dependencies
      env:
        COMPILER: gcc
        VCPKG_ROOT: 'C:\vcpkg'
        VCPKG_PACKAGES: 'assimp boost-system boost-filesystem ccd eigen3 fcl'
        # 'dart-utils' needs tinyxml2 and boost algorithm/lexical-cast
        #   and also boost-math to resolve a circular dependency with lexical-cast
        VCPKG_OPTIONAL_PACKAGES: 'boost-algorithm boost-lexical-cast boost-math bullet3 ode tinyxml2'
        # VCPKG_OPTIONAL_PACKAGES_NOT_WORKING: 'flann ipopt nlopt osg urdfdom'
      shell: cmd
      run: |
        vcpkg install --recurse --triplet x64-windows %VCPKG_PACKAGES%
        vcpkg install --recurse --triplet x64-windows %VCPKG_OPTIONAL_PACKAGES%
    - name: Build
      env:
        COMPILER: gcc
        VCPKG_ROOT: 'C:\vcpkg'
        BUILD_TYPE: Release
        RUN_TESTS: OFF
      shell: cmd
      run: |
        mkdir build
        cd build
        cmake .. -G "Visual Studio 16 2019" -A x64 -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE="%VCPKG_ROOT%/scripts/buildsystems/vcpkg.cmake"
        cmake --build .
