---
name: Publish dartpy

"on":
  push:
    branches:
      - "**"
    tags:
      - "v*.*.*" # Trigger on version tags (e.g., v7.0.0, v7.0.1)
    paths-ignore:
      - ".github/workflows/cache_*.yml"
      - "docker/dev/**"
  pull_request:
    branches:
      - "**"
    paths-ignore:
      - ".github/workflows/cache_*.yml"
      - "docker/dev/**"
  schedule:
    - cron: "0 10 * * 0,3"
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# This workflow will install Python dependencies, run tests and lint with a
# variety of Python versions. For more information see:
#   - https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions
#   - https://github.com/pypa/cibuildwheel/blob/main/examples/github-deploy.yml
jobs:
  build_wheels:
    name: ${{ matrix.os }}-py${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    # Use manylinux container for Linux builds to link against glibc 2.28
    container: ${{ matrix.container }}
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux builds - py312 always runs, others only for PRs/tags
          # Build in manylinux_2_28 container to ensure glibc 2.28 compatibility
          - os: ubuntu-latest
            python-version: "312"
            experimental: false
            container: quay.io/pypa/manylinux_2_28_x86_64

          - os: ubuntu-latest
            python-version: "313"
            experimental: false
            skip_for_commit: true
            container: quay.io/pypa/manylinux_2_28_x86_64

          - os: ubuntu-latest
            python-version: "314"
            experimental: false
            skip_for_commit: true
            container: quay.io/pypa/manylinux_2_28_x86_64

          # macOS builds - py312 runs on commits, others only for PRs/tags
          - os: macos-latest
            python-version: "312"
            experimental: false

          - os: macos-latest
            python-version: "313"
            experimental: false
            skip_for_commit: true

          - os: macos-latest
            python-version: "314"
            experimental: false
            skip_for_commit: true

          # Windows builds - py312 runs on commits, others only for PRs/tags
          - os: windows-latest
            python-version: "312"
            experimental: false

          - os: windows-latest
            python-version: "313"
            experimental: false
            skip_for_commit: true

          - os: windows-latest
            python-version: "314"
            experimental: false
            skip_for_commit: true
    steps:
      - name: Check if build should run
        id: should_run
        shell: bash
        run: |
          # Run if:
          # 1. It's a PR
          # 2. It's a tag (v*.*.*)
          # 3. skip_for_commit is not set (i.e., ubuntu-latest py312)
          if [[ "${{ github.event_name }}" == "pull_request" ]] || \
             [[ "${{ github.ref }}" == refs/tags/v* ]] || \
             [[ "${{ matrix.skip_for_commit }}" != "true" ]]; then
            echo "run=true" >> $GITHUB_OUTPUT
          else
            echo "run=false" >> $GITHUB_OUTPUT
            echo "Skipping build for regular commit (not PR or tag)"
          fi

      # Install git in manylinux container (required for actions/checkout)
      - name: Install git in container
        if: steps.should_run.outputs.run == 'true' && matrix.container != ''
        run: |
          if command -v yum &> /dev/null; then
            yum install -y git
          elif command -v apt-get &> /dev/null; then
            apt-get update && apt-get install -y git
          fi

      - uses: actions/checkout@v5
        if: steps.should_run.outputs.run == 'true'

      - name: Set up pixi
        if: steps.should_run.outputs.run == 'true'
        uses: prefix-dev/setup-pixi@v0.8.1
        with:
          pixi-version: latest
          cache: true

      - name: Build wheel
        if: steps.should_run.outputs.run == 'true'
        run: pixi run -e py${{ matrix.python-version }}-wheel wheel-build

      - name: Repair wheel (Linux only)
        if: steps.should_run.outputs.run == 'true' && matrix.os == 'ubuntu-latest'
        run: pixi run -e py${{ matrix.python-version }}-wheel wheel-repair

      - name: Verify wheel
        if: steps.should_run.outputs.run == 'true'
        run: pixi run -e py${{ matrix.python-version }}-wheel wheel-verify

      - name: Test wheel
        if: steps.should_run.outputs.run == 'true'
        run: pixi run -e py${{ matrix.python-version }}-wheel wheel-test

      - name: Prepare artifacts
        if: steps.should_run.outputs.run == 'true'
        run: |
          mkdir -p wheelhouse
          mv dist/*.whl wheelhouse/

      - uses: actions/upload-artifact@v4
        if: steps.should_run.outputs.run == 'true'
        with:
          path: ./wheelhouse/*.whl
          name: ${{ matrix.os }}-py${{ matrix.python-version }}

  upload_pypi:
    needs: [build_wheels]
    runs-on: ubuntu-latest
    # Publish all tagged versions (stable and dev) to production PyPI
    # Examples: v7.0.0, v7.0.0.dev0, v7.0.0.alpha1, v7.0.0.beta1, v7.0.0.rc1
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/download-artifact@v5
        with:
          # unpacks default artifact into dist/
          # if `name: artifact` is omitted, the action will create extra parent dir
          # name: artifact
          path: dist
          merge-multiple: true

      - name: List files in dist
        run: ls -lR dist/

      - uses: pypa/gh-action-pypi-publish@v1.13.0
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}
          skip-existing: true
