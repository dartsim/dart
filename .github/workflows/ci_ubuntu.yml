# https://help.github.com/en/articles/workflow-syntax-for-github-actions

name: CI Linux

on:
  push:
    branches:
      - "**"
    paths-ignore:
      - ".github/workflows/cache_*.yml"
      - "docker/dev/**"
  pull_request:
    branches:
      - "**"
    paths-ignore:
      - ".github/workflows/cache_*.yml"
      - "docker/dev/**"
  schedule:
    # Cron syntax: [minute hour day_of_the_month month day_of_the_week]
    - cron: "0 2 * * 0,3" # Run every Sunday and Wednesday at 02:00
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  coverage:
    if: github.event_name != 'workflow_dispatch'
    name: coverage
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup pixi
        uses: prefix-dev/setup-pixi@v0.9.2
        with:
          cache: true

      - name: Install system dependencies
        uses: awalsh128/cache-apt-pkgs-action@v1.6.0
        with:
          packages: libgl1-mesa-dev libglu1-mesa-dev
          version: 1.0

      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ runner.os }}-coverage
          max-size: 500M

      - name: Configure environment for ccache
        run: |
          echo "CMAKE_C_COMPILER_LAUNCHER=ccache" >> $GITHUB_ENV
          echo "CMAKE_CXX_COMPILER_LAUNCHER=ccache" >> $GITHUB_ENV

      - name: Build with coverage
        run: |
          DART_VERBOSE=ON \
          BUILD_TYPE=Debug \
          pixi run build-coverage

      - name: Generate coverage report
        run: |
          DART_VERBOSE=ON \
          BUILD_TYPE=Debug \
          pixi run coverage-report

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  build-release:
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup pixi
        uses: prefix-dev/setup-pixi@v0.9.2
        with:
          cache: true

      - name: Install system dependencies
        uses: awalsh128/cache-apt-pkgs-action@v1.6.0
        with:
          packages: libgl1-mesa-dev libglu1-mesa-dev
          version: 1.0

      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ runner.os }}-Release
          max-size: 500M

      - name: Configure environment for ccache
        run: |
          echo "CMAKE_C_COMPILER_LAUNCHER=ccache" >> $GITHUB_ENV
          echo "CMAKE_CXX_COMPILER_LAUNCHER=ccache" >> $GITHUB_ENV

      - name: Check Lint
        run: |
          DART_VERBOSE=ON \
          BUILD_TYPE=Release \
          pixi run check-lint

      - name: Test DART and dartpy
        run: |
          DART_VERBOSE=ON \
          BUILD_TYPE=Release \
          pixi run test-all

      - name: Install
        run: |
          DART_VERBOSE=ON \
          BUILD_TYPE=Release \
          pixi run install

  build-debug:
    name: Debug
    runs-on: ubuntu-latest
    # Only run Debug builds on schedule or main branch
    if: github.event_name == 'schedule' || github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup pixi
        uses: prefix-dev/setup-pixi@v0.9.2
        with:
          cache: true

      - name: Install system dependencies
        uses: awalsh128/cache-apt-pkgs-action@v1.6.0
        with:
          packages: libgl1-mesa-dev libglu1-mesa-dev
          version: 1.0

      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ runner.os }}-Debug
          max-size: 500M

      - name: Configure environment for ccache
        run: |
          echo "CMAKE_C_COMPILER_LAUNCHER=ccache" >> $GITHUB_ENV
          echo "CMAKE_CXX_COMPILER_LAUNCHER=ccache" >> $GITHUB_ENV

      - name: Test DART and dartpy
        run: |
          DART_VERBOSE=ON \
          BUILD_TYPE=Debug \
          pixi run test-all
