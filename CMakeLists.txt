CMAKE_MINIMUM_REQUIRED(VERSION 2.8)

message(STATUS "Generate makefile/project file for DART")

message(STATUS "CMAKE_BINARY_DIR = ${CMAKE_BINARY_DIR}")

###############################################
# SETTING: Global settings
INCLUDE_DIRECTORIES("src")

SET(CMAKE_CXX_WARNING_LEVEL 4)
SET(EIGEN_DIR ${CMAKE_SOURCE_DIR}/thirdparty/eigen-3.0.1)

if (WIN32)
#  message(STATUS "Setup Visual Studio Specific Flags")
#  SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /MTd /Zi /GL /Gy")
#  SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /MT /Zi /GL /Gy")
#elseif (APPLE)
#elseif (UNIX AND NOT APPLE)
elseif (UNIX)  
  # SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -msse2")
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -msse2 -O3")
endif()

###############################################
# Generate the path header file
SET(PATH_HEADER_DIR ${CMAKE_SOURCE_DIR}/src/utils/Paths.h)
message(STATUS "Generate the path header file to  ${PATH_HEADER_DIR}")
FILE( WRITE ${PATH_HEADER_DIR} "// This file is automatically generated from CMake\n")
FILE(APPEND ${PATH_HEADER_DIR} "#ifndef UTILS_PATHS_H\n")
FILE(APPEND ${PATH_HEADER_DIR} "#define UTILS_PATHS_H\n")
FILE(APPEND ${PATH_HEADER_DIR} "\n")
FILE(APPEND ${PATH_HEADER_DIR} 
    "#define DART_ROOT_PATH \"${CMAKE_SOURCE_DIR}/\"\n")
FILE(APPEND ${PATH_HEADER_DIR} 
    "#define DART_DATA_PATH \"${CMAKE_SOURCE_DIR}/data/\"\n")
FILE(APPEND ${PATH_HEADER_DIR} "\n")
FILE(APPEND ${PATH_HEADER_DIR} "#endif // ifndef UTILS_PATHS_H\n")

###############################################
# User specific settings
INCLUDE(Directories.cmake)
INCLUDE(ThirdParties.cmake)

FIND_PATH( MATHPLOT_INCLUDE_DIR NAMES mathplot2.h )
message(STATUS "INCLUDES = ${CMAKE_INCLUDE_PATH}")
message(STATUS "MATHPLOT = ${MATHPLOT_INCLUDE_DIR}")

###############################################
# Find important packages
FIND_PACKAGE(OpenGL)
IF (OPENGL_FOUND)
MESSAGE("OPENGL FOUND")
MESSAGE(${OPENGL_LIBRARIES})
ELSE (OPENGL_FOUND)
MESSAGE("OPENGL NOT FOUND")
ENDIF ()

if (WIN32)
    SET(GLUT_glut_LIBRARY glut32)
    MESSAGE("GLUT FOUND")
    MESSAGE(${GLUT_glut_LIBRARY})
else()
    FIND_PACKAGE(GLUT)
    IF (GLUT_FOUND)
        MESSAGE("GLUT FOUND")
        MESSAGE(${GLUT_glut_LIBRARY})
    ELSE (GLUT_FOUND)
        MESSAGE("GLUT NOT FOUND")
    ENDIF ()
endif()

ADD_SUBDIRECTORY(src)

###############################################
# Install Targets
if(MSVC)
    set(CMAKE_INSTALL_PREFIX "C:/Golems" )
else ()
    set(CMAKE_INSTALL_PREFIX /usr/local )
endif()

FILE(GLOB srcs "src/collision/*.cpp" "src/dynamics/*.cpp" "src/geometry/*.cpp" "src/kinematics/*.cpp" "src/utils/*.cpp" "src/planning/*.cpp" "src/renderer/*.cpp" )
FILE(GLOB collision_hdrs "src/collision/*.h")
FILE(GLOB dynamics_hdrs "src/dynamics/*.h")
FILE(GLOB geometry_hdrs "src/geometry/*.h")
FILE(GLOB kinematics_hdrs "src/kinematics/*.h")
FILE(GLOB kinematics_hpps "src/kinematics/*.h")
FILE(GLOB util_hdrs "src/utils/*.h")
FILE(GLOB planning_hdrs "src/planning/*.h")
FILE(GLOB renderer_hdrs "src/renderer/*.h")

ADD_LIBRARY(dart ${srcs} ${collision_hdrs} ${dynamics_hdrs} ${geometry_hdrs} ${kinematics_hdrs} ${kinematics_hpps} ${util_hdrs} ${planning_hdrs} ${renderer_hdrs} )
TARGET_LINK_LIBRARIES(dart)
SET_TARGET_PROPERTIES(dart PROPERTIES ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/lib")

INSTALL(FILES ${collision_hdrs} DESTINATION include/dart/collision )
INSTALL(FILES ${dynamics_hdrs} DESTINATION include/dart/dynamics )
INSTALL(FILES ${geometry_hdrs} DESTINATION include/dart/geometry )
INSTALL(FILES ${kinematics_hdrs} DESTINATION include/dart/kinematics )
INSTALL(FILES ${kinematics_hpps} DESTINATION include/dart/kinematics )
INSTALL(FILES ${util_hdrs} DESTINATION include/dart/utils )
INSTALL(FILES ${planning_hdrs} DESTINATION include/dart/planning )
INSTALL(FILES ${renderer_hdrs} DESTINATION include/dart/renderer )
INSTALL(TARGETS dart ARCHIVE DESTINATION lib)

# Install Eigen
INSTALL(DIRECTORY ${EIGEN_DIR}/Eigen DESTINATION include/eigen3)
INSTALL(DIRECTORY ${EIGEN_DIR}/unsupported DESTINATION include/eigen3)
INSTALL(FILES ${EIGEN_DIR}/signature_of_eigen3_matrix_library DESTINATION include/eigen3)

###############################################
# Doxygen
FIND_PACKAGE(Doxygen)
IF (DOXYGEN_FOUND)

  SET(DOXYGEN_INPUT "Doxyfile")
  SET(DOXYGEN_OUTPUT "doc")

  ADD_CUSTOM_COMMAND(
    OUTPUT ${DOXYGEN_OUTPUT}
    COMMAND ${CMAKE_COMMAND} -E echo_append "Building API Documentation..."
    COMMAND ${DOXYGEN_EXECUTABLE} ${DOXYGEN_INPUT}
    COMMAND ${CMAKE_COMMAND} -E echo "Done."
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
    DEPENDS ${DOXYGEN_INPUT}
    )

  ADD_CUSTOM_TARGET(docs DEPENDS ${DOXYGEN_OUTPUT})
  # ADD_CUSTOM_TARGET(apidoc ALL DEPENDS ${DOXYGEN_OUTPUT})

  ADD_CUSTOM_TARGET(docs_forced
    COMMAND ${CMAKE_COMMAND} -E echo_append "Building API Documentation..."
    COMMAND ${DOXYGEN_EXECUTABLE} ${DOXYGEN_INPUT}
    COMMAND ${CMAKE_COMMAND} -E echo "Done."
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})

ENDIF (DOXYGEN_FOUND)
