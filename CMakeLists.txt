CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
project (dart)
message(STATUS "Generate makefile/project file for DART")

SET(CPACK_PACKAGE_VERSION_MAJOR "0")
SET(CPACK_PACKAGE_VERSION_MINOR "1")
SET(CPACK_PACKAGE_VERSION_PATCH "1")
SET(CPACK_PACKAGE_NAME "dart")
SET(CPACK_SYSTEM_NAME "i386")
SET(CPACK_DEBIAN_PACKAGE_DEPENDS "glutg3 (>= 3.7), glutg3-dev (>= 3.7)")

message(STATUS "CMAKE_BINARY_DIR = ${CMAKE_BINARY_DIR}")

###############################################
# SETTING: Global settings
INCLUDE_DIRECTORIES("src")

SET(CMAKE_CXX_WARNING_LEVEL 4)
SET(EIGEN_DIR ${CMAKE_SOURCE_DIR}/thirdparty/eigen-3.0.1)

if (WIN32)
  message(STATUS "Setup Visual Studio Specific Flags")
  SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /MDd /Zi /GL /Gy /W1")
  SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /MD /Zi /GL /Gy /W1")
  SET(CMAKE_INSTALL_PREFIX "C:/Golems" )
#elseif (APPLE)
#elseif (UNIX AND NOT APPLE)
elseif (UNIX)  
  # SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -msse2")
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -msse2 -O3")
  SET(CMAKE_INSTALL_PREFIX /usr/local )
endif()

###############################################
# Generate the path header file
SET(PATH_HEADER_DIR ${CMAKE_SOURCE_DIR}/src/utils/Paths.h)
message(STATUS "Generate the path header file to  ${PATH_HEADER_DIR}")
FILE( WRITE ${PATH_HEADER_DIR} "// This file is automatically generated from CMake\n")
FILE(APPEND ${PATH_HEADER_DIR} "#ifndef UTILS_PATHS_H\n")
FILE(APPEND ${PATH_HEADER_DIR} "#define UTILS_PATHS_H\n")
FILE(APPEND ${PATH_HEADER_DIR} "\n")
FILE(APPEND ${PATH_HEADER_DIR} 
    "#define DART_ROOT_PATH \"${CMAKE_SOURCE_DIR}/\"\n")
FILE(APPEND ${PATH_HEADER_DIR} 
    "#define DART_DATA_PATH \"${CMAKE_SOURCE_DIR}/data/\"\n")
FILE(APPEND ${PATH_HEADER_DIR} "\n")
FILE(APPEND ${PATH_HEADER_DIR} "#endif // ifndef UTILS_PATHS_H\n")

###############################################
# User specific settings
INCLUDE(Directories.cmake)
INCLUDE(ThirdParties.cmake)

FIND_PATH( MATHPLOT_INCLUDE_DIR NAMES mathplot2.h )
message(STATUS "INCLUDES = ${CMAKE_INCLUDE_PATH}")
message(STATUS "MATHPLOT = ${MATHPLOT_INCLUDE_DIR}")

###############################################
# Find important packages
FIND_PACKAGE(OpenGL)
IF (OPENGL_FOUND)
MESSAGE("OPENGL FOUND")
MESSAGE(${OPENGL_LIBRARIES})
ELSE (OPENGL_FOUND)
MESSAGE("OPENGL NOT FOUND")
ENDIF ()

if (WIN32)
    SET(GLUT_glut_LIBRARY glut32)
    MESSAGE("GLUT FOUND")
    MESSAGE(${GLUT_glut_LIBRARY})
else()
    FIND_PACKAGE(GLUT)
    IF (GLUT_FOUND)
        MESSAGE("GLUT FOUND")
        MESSAGE(${GLUT_glut_LIBRARY})
    ELSE (GLUT_FOUND)
        MESSAGE("GLUT NOT FOUND")
    ENDIF ()
endif()

ADD_SUBDIRECTORY(src)

###############################################
# Install Targets
# Generate the Dart CMake Config file
SET(DART_CONFIG ${CMAKE_SOURCE_DIR}/DART_config.cmake)
message(STATUS "Generating ${DART_CONFIG}")
FILE( WRITE ${DART_CONFIG} "# This file is automatically generated from CMake\n")
FILE(APPEND ${DART_CONFIG} "# Include this file in CMakeLists.txt with \n# INCLUDE(\${CMAKE_INSTALL_PREFIX}/share/dart/DART_config.cmake) \n\n")
FILE(APPEND ${DART_CONFIG} "\nINCLUDE_DIRECTORIES(${CMAKE_INSTALL_PREFIX}/include/dart)")
FILE(APPEND ${DART_CONFIG} "\nINCLUDE_DIRECTORIES(${CMAKE_INSTALL_PREFIX}/include/eigen3)")
FILE(APPEND ${DART_CONFIG} "\nSET(DART_HEADERS ${CMAKE_INSTALL_PREFIX}/include/dart)")
FILE(APPEND ${DART_CONFIG} "\n\nLINK_DIRECTORIES(${CMAKE_INSTALL_PREFIX}/lib)")
FILE(APPEND ${DART_CONFIG} "\nSET(DART_LIBRARIES collision dynamics geometry kinematics planning renderer utils)")
FILE(APPEND ${DART_CONFIG} "\n\n")
INSTALL(FILES ${DART_CONFIG} DESTINATION share/dart)

# Install Eigen
INSTALL(DIRECTORY ${EIGEN_DIR}/Eigen DESTINATION include/eigen3)
INSTALL(DIRECTORY ${EIGEN_DIR}/unsupported DESTINATION include/eigen3)
INSTALL(FILES ${EIGEN_DIR}/signature_of_eigen3_matrix_library DESTINATION include/eigen3)

###############################################
# Doxygen
FIND_PACKAGE(Doxygen)
IF (DOXYGEN_FOUND)

  SET(DOXYGEN_INPUT "Doxyfile")
  SET(DOXYGEN_OUTPUT "doc")

  ADD_CUSTOM_COMMAND(
    OUTPUT ${DOXYGEN_OUTPUT}
    COMMAND ${CMAKE_COMMAND} -E echo_append "Building API Documentation..."
    COMMAND ${DOXYGEN_EXECUTABLE} ${DOXYGEN_INPUT}
    COMMAND ${CMAKE_COMMAND} -E echo "Done."
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
    DEPENDS ${DOXYGEN_INPUT}
    )

  ADD_CUSTOM_TARGET(docs DEPENDS ${DOXYGEN_OUTPUT})
  # ADD_CUSTOM_TARGET(apidoc ALL DEPENDS ${DOXYGEN_OUTPUT})

  ADD_CUSTOM_TARGET(docs_forced
    COMMAND ${CMAKE_COMMAND} -E echo_append "Building API Documentation..."
    COMMAND ${DOXYGEN_EXECUTABLE} ${DOXYGEN_INPUT}
    COMMAND ${CMAKE_COMMAND} -E echo "Done."
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})

ENDIF (DOXYGEN_FOUND)

###############################################
# Package Installer

SET(CPACK_PACKAGE_VERSION "${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH}")
SET(CPACK_PACKAGE_FILE_NAME "${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}-${CPACK_SYSTEM_NAME}")
SET(CPACK_DEBIAN_PACKAGE_MAINTAINER "Karen Liu (www.cc.gatech.edu/~karenliu/)")

SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY "Dynamic Animation and Robotics Toolkit.")
SET(CPACK_PACKAGE_VENDOR "Computer Graphics Lab at GT")

INCLUDE(CPack)