The following protocol are mandatory when you develop code for the libraries. It is important that we keep a consistent format through out the entire code base.

1. Naming convention
- file name: capitalize the first letter of each word (e.g. MyFile)
- namespace name: use all lowercase in one word (e.g. mynamespace) 
- class name: capitalize the first letter of each word (e.g. MyClass)
- function name: use lowercase for the first word and capitalize the rest (e.g. myFunction)
- member variable: start with "m" and capitalize each word (e.g. mMemberVariable)
- function parameter: start with "_", use lowercase for the first word, and capitalize the rest (e.g. _inputFile)
- local variable: use lowercase for the first word and capitalize the rest (e.g. localVariable)
- global variable: start with "g" and capitalize each word (e.g. gGravity) 

2. File organization
- Header file should be organized by the following order: public, protected, private.
- The functions in cpp files should follow the same order as they are declared in the header files.
- Use forward declaration when possible
- Move all implementation that refers to additional header files to cpp file (including inline functions)
- Write a separate header file for machine dependent code (e.g. see /src/utils/LoadOpengl.h)

3. Commenting
- Except for "get" and "set" function, every member function needs to be documented. 
- Put comments that show up on Doxygen in the header files and put implementation details in the cpp files
- Doxygen commenting examples:
  /** Describe what MyClass is about */
  @brief This is a one-line introduction of MyClass.
  ///< Describe what this member variable or member function is about
  See src/kinematics/BodyNode.h for more examples.
 
3. Namespace
- Don't create nested namespace more than two levels (e.g. optimization::convex::quadratic is too long)
- In a header file, don't use shortcut "using namespace mynamespace". Instead, explicitly specify the namespace the data type belongs to (e.g. mynamespace::MyClass)
- Put the comment after the closing bracket. For example:
namespace mynamespace{
...
} // namespace mynamespace

4. Constant
- For a member function that does not modify the data members, declare it as constant function (e.g. double getValue() const;)

5. Header guard
- Protect the header file with #ifndef statement. Use the following convention:
#ifndef KINEMATICS_BODYNODE_H
#define KINEMATICS_BODYNODE_H 
...
#endif // #ifndef KINEMATICS_BODYNODE_H

7. Destructor
 Always use virtual destructor (e.g. virtual ~MyClasee();)

9. Tab
- Use space instead of tab. One tab consists of "4" white spaces.
- All editors including VIM, Emacs, Visual Studio support "tab to space" mode

10. Pointer declaration
- Use "int *a" instead of "int* a"

11. Integer and floating variables
- Use "int" instead of "size_t" 
- Use "unsigned int" when needed
- Don't apply equality operator on floating variables

12. Indentation and bracketing
- The left bracket should follow the previous statement immediately (e.g. if (a == 0) { )
- Use the following indentation convention
for (int i = 0; i < n; i++) {
}

13. Include statement
- Do not use relative path ".." in the include statement
#include "utils/timer.h" (good)
#include "../utils/timer.h" (bad)

14. Debug mode
- Use _DEBUG flag instead of DEBUG for code that has to be run in debug mode only.
