[project]
name = "DART"
version = "6.15.0"
description = "Dynamic Animation and Robotics Toolkit"
authors = ["Jeongseok Lee <jslee02@gmail.com>"]
channels = ["conda-forge"]
platforms = ["linux-64", "osx-64", "osx-arm64", "win-64"]

[build-dependencies]
black = ">=24.2.0"
cmake = ">=3.22"
doxygen = ">=1.10.0"
isort = ">=5.13.2"
ninja = ">=1.11.1"
pip = ">=24.0"
pipx = ">=1.4.3"
pkg-config = ">=0.29.2"
pytest = ">=8.1.1"
setuptools = ">=69.1.1"

[dependencies]
assimp = ">=5.3.1"
libboost-devel = ">=1.86.0"
bullet-cpp = ">=3.25"
console_bridge = ">=1.0.2"
eigen = ">=3.4.0"
fcl = ">=0.7.0"
fmt = ">=10.2.1"
imgui = ">=1.90.8"
ipopt = ">=3.14.14"
libode = ">=0.16.2"
nlopt = ">=2.7.1"
numpy = ">=1.26.4"
octomap = ">=1.9.8"
openscenegraph = ">=3.6.5"
pagmo-devel = ">=2.19.1"
spdlog = ">=1.12.0"
tinyxml2 = ">=10.0.0"
urdfdom = ">=4.0.0"

[tasks]
clean = { cmd = "rm -rf build && rm -rf .deps && rm -rf .pixi && rm pixi.lock" }

config = { cmd = """
    cmake \
        -G Ninja \
        -S . \
        -B build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE \
        -DCMAKE_INSTALL_PREFIX=$CONDA_PREFIX \
        -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
        -DDART_VERBOSE=$DART_VERBOSE \
        -DDART_USE_SYSTEM_IMGUI=ON \
        -DCMAKE_PREFIX_PATH=$CONDA_PREFIX
""", env = { DART_VERBOSE = "OFF", BUILD_TYPE = "Release" } }

lint-cpp = { cmd = """
    cmake \
    --build build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE \
    --target format
""", depends_on = ["config"] }

lint-py = { cmd = """
    black . --exclude '\\..*' \
    && isort . --skip-glob '.*'
""", depends_on = ["config"] }

lint = { depends_on = ["lint-cpp", "lint-py"] }

check-lint-cpp = { cmd = """
    cmake \
        --build build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE \
        --target check-format
""", depends_on = ["config"], env = { BUILD_TYPE = "Release" } }

check-lint-py = { cmd = """
    black . --check --exclude '\\..*' \
    && isort . --check --skip-glob '.*'
""", depends_on = ["config"] }

check-lint = { depends_on = ["check-lint-cpp", "check-lint-py"] }

build = { cmd = """
    cmake \
        --build build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE \
        -j \
        --target all
""", depends_on = ["config"] }

build-tests = { cmd = """
    cmake \
        --build build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE \
        -j \
        --target tests
""", depends_on = ["config"] }

build-dartpy = { cmd = """
    cmake \
        --build build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE \
        -j \
        --target dartpy
""", depends_on = ["config"] }

test = { cmd = """
    ctest \
        --test-dir build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE \
        --output-on-failure
""", depends_on = ["build-tests"] }

test-dartpy = { cmd = """
    cmake \
        --build build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE \
        -j \
        --target pytest
""", depends_on = ["config"] }

test-all = { cmd = """
    cmake --build build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE -j --target ALL
""", depends_on = ["config"] }

ex = { cmd = """
    cmake \
        --build build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE \
        --target $EXE \
        --parallel \
    && ./build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE/bin/$EXE
""", depends_on = [
    "config",
], env = { EXE = "hello_world", BUILD_TYPE = "Release" } }

ex-atlas-puppet = { cmd = """
    cmake \
        --build build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE \
        --target atlas_puppet \
        --parallel \
    && ./build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE/bin/atlas_puppet
""", depends_on = ["config"], env = { BUILD_TYPE = "Release" } }

ex-atlas-simbicon = { cmd = """
    cmake \
        --build build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE \
        --target atlas_simbicon \
        --parallel \
    && ./build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE/bin/atlas_simbicon
""", depends_on = ["config"], env = { BUILD_TYPE = "Release" } }

ex-hello-world = { cmd = """
    cmake \
        --build build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE \
        --target hello_world \
        --parallel \
    && ./build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE/bin/hello_world
""", depends_on = ["config"], env = { BUILD_TYPE = "Release" } }

bm = { cmd = """
    cmake \
        --build build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE \
        --target BM_INTEGRATION_$EXE \
        --parallel \
    && ./build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE/bin/BM_INTEGRATION_$EXE
""", depends_on = ["config"], env = { EXE = "empty", BUILD_TYPE = "Release" } }

bm-boxes = { cmd = """
    cmake \
        --build build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE \
        --target BM_INTEGRATION_boxes \
        --parallel \
    && ./build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE/bin/BM_INTEGRATION_boxes
""", depends_on = ["config"], env = { BUILD_TYPE = "Release" } }

bm-empty = { cmd = """
    cmake \
        --build build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE \
        --target BM_INTEGRATION_empty \
        --parallel \
    && ./build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE/bin/BM_INTEGRATION_empty
""", depends_on = ["config"], env = { BUILD_TYPE = "Release" } }

bm-kinematics = { cmd = """
    cmake \
        --build build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE \
        --target BM_INTEGRATION_kinematics \
        --parallel \
    && ./build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE/bin/BM_INTEGRATION_kinematics
""", depends_on = [
    "config",
], env = { BUILD_TYPE = "Release" } }

tu-biped = { cmd = """
    cmake \
        --build build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE \
        --target tutorial_biped \
        --parallel \
    && ./build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE/bin/tutorial_biped
""", depends_on = ["config"], env = { BUILD_TYPE = "Release" } }

tu-biped-fi = { cmd = """
    cmake \
        --build build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE \
        --target tutorial_biped_finished \
        --parallel \
    && ./build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE/bin/tutorial_biped_finished
""", depends_on = [
    "config",
], env = { BUILD_TYPE = "Release" } }

tu-collisions = { cmd = """
    cmake \
        --build build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE \
        --target tutorial_collisions \
        --parallel \
    && ./build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE/bin/tutorial_collisions
""", depends_on = ["config"], env = { BUILD_TYPE = "Release" } }

tu-collisions-fi = { cmd = """
    cmake \
        --build build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE \
        --target tutorial_collisions_finished \
        --parallel \
    && ./build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE/bin/tutorial_collisions_finished
""", depends_on = [
    "config",
], env = { BUILD_TYPE = "Release" } }

tu-dominoes = { cmd = """
    cmake \
        --build build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE \
        --target tutorial_dominoes \
        --parallel \
    && ./build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE/bin/tutorial_dominoes
""", depends_on = ["config"], env = { BUILD_TYPE = "Release" } }

tu-dominoes-fi = { cmd = """
    cmake \
        --build build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE \
        --target tutorial_dominoes_finished \
        --parallel \
    && ./build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE/bin/tutorial_dominoes_finished
""", depends_on = [
    "config",
], env = { BUILD_TYPE = "Release" } }

tu-multi-pendulum = { cmd = """
    cmake \
        --build build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE \
        --target tutorial_multi_pendulum \
        --parallel \
    && ./build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE/bin/tutorial_multi_pendulum
""", depends_on = [
    "config",
], env = { BUILD_TYPE = "Release" } }

tu-multi-pendulum-fi = { cmd = """
    cmake \
        --build build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE \
        --target tutorial_multi_pendulum_finished \
        --parallel \
    && ./build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE/bin/tutorial_multi_pendulum_finished
""", depends_on = [
    "config",
], env = { BUILD_TYPE = "Release" } }

install = { cmd = """
    cmake \
        --build build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE \
        --target install \
        --parallel \
""", depends_on = ["config"], env = { BUILD_TYPE = "Release" } }

################################################################################
# linux-64
################################################################################

[target.linux-64.build-dependencies]
clang-format-14 = ">=14.0.6,<15"

[target.linux-64.dependencies]
freeglut = ">=3.2.2,<3.3"

[target.linux-64.tasks]
tracy = { cmd = """
    docker run \
        --rm \
        -d \
        -e DISPLAY=$DISPLAY \
        -v /tmp/.X11-unix:/tmp/.X11-unix:rw \
        --net=host \
        tracy-profiler
""" }

################################################################################
# osx-64
################################################################################

[target.osx-64.build-dependencies]
clang-format-14 = ">=14.0.6,<15"

[target.osx-64.dependencies]

[target.osx-64.tasks]

################################################################################
# osx-arm64
################################################################################

[target.osx-arm64.build-dependencies]
clang-format-14 = ">=14.0.6,<15"

[target.osx-arm64.dependencies]

[target.osx-arm64.tasks]

################################################################################
# win-64
################################################################################

[target.win-64.dependencies]
freeglut = ">=3.2.2"

[target.win-64.tasks]
config = { cmd = """
    cmake \
        -S . \
        -B build/$PIXI_ENVIRONMENT_NAME/cpp \
        -G 'Visual Studio 17 2022' \
        -DBUILD_SHARED_LIBS=OFF \
        -DCMAKE_INSTALL_PREFIX=$CONDA_PREFIX \
        -DCMAKE_PREFIX_PATH=$CONDA_PREFIX \
        -DDART_MSVC_DEFAULT_OPTIONS=ON \
        -DDART_USE_SYSTEM_IMGUI=ON \
        -DDART_VERBOSE=$DART_VERBOSE
""", env = { DART_VERBOSE = "OFF" } }

lint-py = { cmd = """
    black . --exclude '\\..*' && isort . --skip-glob '.*'
""", depends_on = ["config"] }

lint = { depends_on = ["lint-py"] }

check-lint-py = { cmd = """
    black . --check --exclude '\\..*' && isort . --check --skip-glob '.*'
""", depends_on = ["config"] }

check-lint = { depends_on = ["check-lint-py"] }

build = { cmd = """
    cmake \
        --build build/$PIXI_ENVIRONMENT_NAME/cpp \
        --config $BUILD_TYPE \
        -j
""", depends_on = ["config"], env = { BUILD_TYPE = "Release" } }

build-tests = { cmd = """
    cmake \
        --build build/$PIXI_ENVIRONMENT_NAME/cpp \
        --config $BUILD_TYPE \
        -j \
        --target tests
""", depends_on = ["config"], env = { BUILD_TYPE = "Release" } }

build-dartpy = { cmd = """
    cmake \
        --build build/$PIXI_ENVIRONMENT_NAME/cpp \
        -j \
        --target dartpy
""", depends_on = ["config"] }

test = { cmd = """
    ctest \
        --test-dir build/$PIXI_ENVIRONMENT_NAME/cpp \
        --build-config $BUILD_TYPE \
        --output-on-failure
""", depends_on = ["build-tests"], env = { BUILD_TYPE = "Release" } }

test-dartpy = { cmd = """
    cmake \
        --build build/$PIXI_ENVIRONMENT_NAME/cpp \
        --config $BUILD_TYPE \
        -j \
        --target pytest
""", depends_on = ["config"], env = { BUILD_TYPE = "Release" } }

test-all = { cmd = """
    cmake \
        --build build/$PIXI_ENVIRONMENT_NAME/cpp \
        --config $BUILD_TYPE \
        -j \
        --target ALL
""", depends_on = ["config"], env = { BUILD_TYPE = "Release" } }

tu-biped = { cmd = """
    cmake \
        --build build/$PIXI_ENVIRONMENT_NAME/cpp \
        --config $BUILD_TYPE \
        --target tutorial_biped \
        --parallel \
    && build/$BUILD_TYPE/tutorial_biped.exe
""", depends_on = ["config"], env = { BUILD_TYPE = "Release" } }

tu-biped-fi = { cmd = """
    cmake \
        --build build/$PIXI_ENVIRONMENT_NAME/cpp \
        --config $BUILD_TYPE \
        --target tutorial_biped_finished \
        --parallel \
    && build/$BUILD_TYPE/tutorial_biped.exe
""", depends_on = ["config"], env = { BUILD_TYPE = "Release" } }

tu-collisions = { cmd = """
    cmake \
        --build build/$PIXI_ENVIRONMENT_NAME/cpp \
        --config $BUILD_TYPE \
        --target tutorial_collisions \
        --parallel \
    && build/$BUILD_TYPE/tutorial_collisions.exe
""", depends_on = ["config"], env = { BUILD_TYPE = "Release" } }

tu-collisions-fi = { cmd = """
    cmake \
        --build build/$PIXI_ENVIRONMENT_NAME/cpp \
        --config $BUILD_TYPE \
        --target tutorial_collisions_finished \
        --parallel \
    && build/$BUILD_TYPE/tutorial_collisions.exe
""", depends_on = ["config"], env = { BUILD_TYPE = "Release" } }

tu-dominoes = { cmd = """
    cmake \
        --build build/$PIXI_ENVIRONMENT_NAME/cpp \
        --config $BUILD_TYPE \
        --target tutorial_dominoes \
        --parallel \
    && build/$BUILD_TYPE/tutorial_dominoes.exe
""", depends_on = ["config"], env = { BUILD_TYPE = "Release" } }

tu-dominoes-fi = { cmd = """
    cmake \
        --build build/$PIXI_ENVIRONMENT_NAME/cpp \
        --config $BUILD_TYPE \
        --target tutorial_dominoes_finished \
        --parallel \
    && build/$BUILD_TYPE/tutorial_dominoes.exe
""", depends_on = ["config"], env = { BUILD_TYPE = "Release" } }

tu-multi-pendulum = { cmd = """
    cmake \
        --build build/$PIXI_ENVIRONMENT_NAME/cpp \
        --config $BUILD_TYPE \
        --target tutorial_multi_pendulum \
        --parallel \
    && build/$BUILD_TYPE/tutorial_multi_pendulum.exe
""", depends_on = ["config"], env = { BUILD_TYPE = "Release" } }

tu-multi-pendulum-fi = { cmd = """
    cmake \
        --build build/$PIXI_ENVIRONMENT_NAME/cpp \
        --config $BUILD_TYPE \
        --target tutorial_multi_pendulum_finished \
        --parallel \
    && build/$BUILD_TYPE/tutorial_multi_pendulum.exe
""", depends_on = ["config"], env = { BUILD_TYPE = "Release" } }

install = { cmd = """
    cmake \
        --build build/$PIXI_ENVIRONMENT_NAME/cpp \
        --config $BUILD_TYPE \
        -j \
        --target install
""", depends_on = ["build"], env = { BUILD_TYPE = "Release" } }
