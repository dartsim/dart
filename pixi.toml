[project]
name = "DART"
version = "6.15.0"
description = "Dynamic Animation and Robotics Toolkit"
authors = ["Jeongseok Lee <jslee02@gmail.com>"]
channels = ["conda-forge"]
platforms = ["linux-64", "osx-64", "osx-arm64", "win-64"]

[build-dependencies]
benchmark = ">=1.9.3,<2"
black = ">=25.1.0,<26"
clang-format = ">=14.0.0,<15"
cmake = ">=4.0.2,<5"
doxygen = ">=1.13.2,<2"
gtest = ">=1.17.0,<2"
isort = ">=6.0.1,<7"
jinja2 = ">=3.1.2"
myst-parser = "*"
ninja = ">=1.12.1,<2"
pip = ">=25.1.1,<26"
pipx = ">=1.7.1,<2"
pkg-config = ">=0.29.2,<0.30"
pybind11-stubgen = ">=2.5.1,<3"
pytest = ">=8.3.5,<9"
setuptools = ">=80.1.0,<81"
sphinx = "*"
sphinx-copybutton = "*"
sphinx-intl = "*"
sphinx_rtd_theme = "*"
sphinx-tabs = "*"
tracy-profiler-gui = ">=0.11.1,<0.12"

[dependencies]
assimp = ">=5.4.3,<6"
bullet-cpp = ">=3.25,<4"
console_bridge = ">=1.0.2,<2"
eigen = ">=3.4.0,<4"
fcl = ">=0.7.0,<0.8"
fmt = ">=11.1.4,<12"
imgui = ">=1.91.9,<2"
ipopt = ">=3.14.17,<4"
libboost-devel = ">=1.86.0,<2"
libode = ">=0.16.5,<0.17"
nlopt = ">=2.10.0,<3"
numpy = ">=2.2.5,<3"
octomap = ">=1.10.0,<2"
openscenegraph = ">=3.6.5,<4"
pagmo-devel = ">=2.19.1,<3"
spdlog = ">=1.15.3,<2"
tinyxml2 = ">=11.0.0,<12"
tracy-profiler-client = ">=0.11.1,<0.12"
urdfdom = ">=4.0.1,<5"

[tasks]
clean = { cmd = "rm -rf build && rm -rf .deps && rm -rf .pixi && rm pixi.lock" }

config = { cmd = """
    cmake \
        -G Ninja \
        -S . \
        -B build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE \
        -DCMAKE_INSTALL_PREFIX=$CONDA_PREFIX \
        -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
        -DCMAKE_PREFIX_PATH=$CONDA_PREFIX \
        -DDART_BUILD_DARTPY=ON \
        -DDART_BUILD_PROFILE=ON \
        -DDART_USE_SYSTEM_GOOGLEBENCHMARK=ON \
        -DDART_USE_SYSTEM_GOOGLETEST=ON \
        -DDART_USE_SYSTEM_IMGUI=ON \
        -DDART_USE_SYSTEM_TRACY=ON \
        -DDART_VERBOSE=$DART_VERBOSE
""", env = { DART_VERBOSE = "OFF", BUILD_TYPE = "Release" } }

# Auto-fix formatting issues (runs black and isort to format code)
lint-cpp = { cmd = """
    cmake \
    --build build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE \
    --target format
""", depends-on = ["config"], env = { BUILD_TYPE = "Release" } }

lint-py = { cmd = """
    black . --extend-exclude '/\\.[^/]+' && isort . --skip-glob '.*'
""" }

lint = { depends-on = ["lint-cpp", "lint-py"] }

# Check formatting without modifying files (used in CI)
check-lint-cpp = { cmd = """
    cmake \
        --build build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE \
        --target check-format
""", depends-on = ["config"], env = { BUILD_TYPE = "Release" } }

check-lint-py = { cmd = """
    black . --check --extend-exclude '/\\.[^/]+' && isort . --check --skip-glob '.*'
""" }

check-lint = { depends-on = ["check-lint-cpp", "check-lint-py"] }

build = { cmd = """
    cmake \
        --build build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE \
        -j \
        --target all
""", depends-on = ["config"], env = { BUILD_TYPE = "Release" } }

build-debug = { cmd = """
    cmake \
        --build build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE \
        -j \
        --target all
""", depends-on = ["config-debug"], env = { BUILD_TYPE = "Debug" } }

config-debug = { cmd = """
    cmake \
        -G Ninja \
        -S . \
        -B build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE \
        -DCMAKE_INSTALL_PREFIX=$CONDA_PREFIX \
        -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
        -DCMAKE_PREFIX_PATH=$CONDA_PREFIX \
        -DDART_BUILD_DARTPY=ON \
        -DDART_BUILD_PROFILE=ON \
        -DDART_USE_SYSTEM_GOOGLEBENCHMARK=ON \
        -DDART_USE_SYSTEM_GOOGLETEST=ON \
        -DDART_USE_SYSTEM_IMGUI=ON \
        -DDART_USE_SYSTEM_TRACY=ON \
        -DDART_VERBOSE=$DART_VERBOSE
""", env = { DART_VERBOSE = "OFF", BUILD_TYPE = "Debug" } }

build-tests = { cmd = """
    cmake \
        --build build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE \
        -j \
        --target tests
""", depends-on = ["config"], env = { BUILD_TYPE = "Release" } }

build-py-dev = { cmd = """
    cmake \
        --build build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE \
        -j \
        --target dartpy
""", depends-on = ["config-py"], env = { BUILD_TYPE = "Release" } }

config-py = { cmd = """
    cmake \
        -G Ninja \
        -S . \
        -B build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE \
        -DCMAKE_INSTALL_PREFIX=$CONDA_PREFIX \
        -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
        -DCMAKE_PREFIX_PATH=$CONDA_PREFIX \
        -DDART_BUILD_DARTPY=ON \
        -DDART_BUILD_PROFILE=ON \
        -DDART_USE_SYSTEM_GOOGLEBENCHMARK=ON \
        -DDART_USE_SYSTEM_GOOGLETEST=ON \
        -DDART_USE_SYSTEM_IMGUI=ON \
        -DDART_USE_SYSTEM_TRACY=ON \
        -DDART_VERBOSE=$DART_VERBOSE
""", env = { DART_VERBOSE = "OFF", BUILD_TYPE = "Release" } }

py-ex = { cmd = "python python/examples/{{ example }}/main.py", depends-on = ["build-py-dev"], args = [{ arg = "example", default = "hello_world" }], env = { BUILD_TYPE = "Release", PYTHONPATH = "build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE/python/dartpy" } }

py-ex-hello-world = { depends-on = [{ task = "py-ex", args = ["hello_world"] }] }

py-ex-hello-world-gui = { depends-on = [{ task = "py-ex", args = ["hello_world_gui"] }] }

py-ex-rigid-cubes = { depends-on = [{ task = "py-ex", args = ["rigid_cubes"] }] }

py-ex-rigid-chain = { depends-on = [{ task = "py-ex", args = ["rigid_chain"] }] }

py-ex-rigid-loop = { depends-on = [{ task = "py-ex", args = ["rigid_loop"] }] }

py-ex-biped-stand = { depends-on = [{ task = "py-ex", args = ["biped_stand"] }] }

py-ex-contacts-pointcloud = { depends-on = [{ task = "py-ex", args = ["contacts_pointcloud"] }] }

py-ex-drag-and-drop = { depends-on = [{ task = "py-ex", args = ["drag_and_drop"] }] }

py-ex-operational-space-control = { depends-on = [{ task = "py-ex", args = ["operational_space_control"] }] }

test = { cmd = """
    ctest \
        --test-dir build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE \
        --output-on-failure
""", depends-on = ["build-tests"], env = { BUILD_TYPE = "Release" } }

test-py = { cmd = """
    cmake \
        --build build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE \
        -j \
        --target pytest
""", depends-on = ["config"], env = { BUILD_TYPE = "Release" } }

config-coverage = { cmd = """
    cmake \
        -G Ninja \
        -S . \
        -B build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE \
        -DCMAKE_INSTALL_PREFIX=$CONDA_PREFIX \
        -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
        -DCMAKE_PREFIX_PATH=$CONDA_PREFIX \
        -DDART_BUILD_PROFILE=OFF \
        -DDART_CODECOV=ON \
        -DDART_USE_SYSTEM_GOOGLEBENCHMARK=ON \
        -DDART_USE_SYSTEM_GOOGLETEST=ON \
        -DDART_USE_SYSTEM_IMGUI=ON \
        -DDART_USE_SYSTEM_TRACY=ON \
        -DDART_VERBOSE=$DART_VERBOSE
""", env = { DART_VERBOSE = "OFF", BUILD_TYPE = "Debug" } }

build-coverage = { cmd = """
    cmake --build build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE -j --target all tests \
    && ctest --output-on-failure -j --test-dir build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE
""", depends-on = ["config-coverage"], env = { BUILD_TYPE = "Debug" } }

# Note: --rc flag is needed for lcov compatibility with gcc 13+
coverage-report = { cmd = """
    lcov \
        --capture \
        --directory build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE \
        --output-file coverage.info \
        --rc geninfo_unexecuted_blocks=1 \
    && lcov \
        --remove coverage.info \
        '/usr/*' \
        '*/.deps/*' \
        '*/tests/*' \
        '*/examples/*' \
        '*/tutorials/*' \
        --output-file coverage.info \
    && lcov --list coverage.info
""", depends-on = ["build-coverage"], env = { BUILD_TYPE = "Debug" } }

ex = { cmd = """
    cmake \
        --build build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE \
        --target $EXE \
        --parallel \
    && ./build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE/bin/$EXE
""", depends-on = [
    "config",
], env = { EXE = "hello_world", BUILD_TYPE = "Release" } }

ex-atlas-puppet = { cmd = """
    cmake \
        --build build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE \
        --target atlas_puppet \
        --parallel \
    && ./build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE/bin/atlas_puppet
""", depends-on = ["config"], env = { BUILD_TYPE = "Release" } }

ex-atlas-simbicon = { cmd = """
    cmake \
        --build build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE \
        --target atlas_simbicon \
        --parallel \
    && ./build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE/bin/atlas_simbicon
""", depends-on = ["config"], env = { BUILD_TYPE = "Release" } }

ex-hello-world = { cmd = """
    cmake \
        --build build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE \
        --target hello_world \
        --parallel \
    && ./build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE/bin/hello_world
""", depends-on = ["config"], env = { BUILD_TYPE = "Release" } }

py-atlas-puppet = { cmd = """
    PYTHONPATH=build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE/python:$PYTHONPATH \
    python python/examples/atlas_puppet/main.py
""", depends-on = ["build"], env = { BUILD_TYPE = "Release" } }

bm = { cmd = """
    cmake \
        --build build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE \
        --target BM_INTEGRATION_$EXE \
        --parallel \
    && ./build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE/bin/BM_INTEGRATION_$EXE
""", depends-on = ["config"], env = { EXE = "empty", BUILD_TYPE = "Release" } }

bm-boxes = { cmd = """
    cmake \
        --build build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE \
        --target BM_INTEGRATION_boxes \
        --parallel \
    && ./build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE/bin/BM_INTEGRATION_boxes
""", depends-on = ["config"], env = { BUILD_TYPE = "Release" } }

bm-empty = { cmd = """
    cmake \
        --build build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE \
        --target BM_INTEGRATION_empty \
        --parallel \
    && ./build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE/bin/BM_INTEGRATION_empty
""", depends-on = ["config"], env = { BUILD_TYPE = "Release" } }

bm-kinematics = { cmd = """
    cmake \
        --build build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE \
        --target BM_INTEGRATION_kinematics \
        --parallel \
    && ./build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE/bin/BM_INTEGRATION_kinematics
""", depends-on = [
    "config",
], env = { BUILD_TYPE = "Release" } }

tu-biped = { cmd = """
    cmake \
        --build build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE \
        --target tutorial_biped \
        --parallel \
    && ./build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE/bin/tutorial_biped
""", depends-on = ["config"], env = { BUILD_TYPE = "Release" } }

tu-biped-fi = { cmd = """
    cmake \
        --build build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE \
        --target tutorial_biped_finished \
        --parallel \
    && ./build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE/bin/tutorial_biped_finished
""", depends-on = [
    "config",
], env = { BUILD_TYPE = "Release" } }

tu-collisions = { cmd = """
    cmake \
        --build build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE \
        --target tutorial_collisions \
        --parallel \
    && ./build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE/bin/tutorial_collisions
""", depends-on = ["config"], env = { BUILD_TYPE = "Release" } }

tu-collisions-fi = { cmd = """
    cmake \
        --build build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE \
        --target tutorial_collisions_finished \
        --parallel \
    && ./build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE/bin/tutorial_collisions_finished
""", depends-on = [
    "config",
], env = { BUILD_TYPE = "Release" } }

tu-dominoes = { cmd = """
    cmake \
        --build build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE \
        --target tutorial_dominoes \
        --parallel \
    && ./build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE/bin/tutorial_dominoes
""", depends-on = ["config"], env = { BUILD_TYPE = "Release" } }

tu-dominoes-fi = { cmd = """
    cmake \
        --build build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE \
        --target tutorial_dominoes_finished \
        --parallel \
    && ./build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE/bin/tutorial_dominoes_finished
""", depends-on = [
    "config",
], env = { BUILD_TYPE = "Release" } }

tu-multi-pendulum = { cmd = """
    cmake \
        --build build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE \
        --target tutorial_multi_pendulum \
        --parallel \
    && ./build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE/bin/tutorial_multi_pendulum
""", depends-on = [
    "config",
], env = { BUILD_TYPE = "Release" } }

tu-multi-pendulum-fi = { cmd = """
    cmake \
        --build build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE \
        --target tutorial_multi_pendulum_finished \
        --parallel \
    && ./build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE/bin/tutorial_multi_pendulum_finished
""", depends-on = [
    "config",
], env = { BUILD_TYPE = "Release" } }

install = { cmd = """
    cmake \
        --build build/$PIXI_ENVIRONMENT_NAME/cpp \
        --config $BUILD_TYPE \
        -j \
        --target install
""", depends-on = ["config-install"], env = { BUILD_TYPE = "Release" } }

config-install = { cmd = """
    cmake \
        -G Ninja \
        -S . \
        -B build/$PIXI_ENVIRONMENT_NAME/cpp \
        -DCMAKE_INSTALL_PREFIX=$CONDA_PREFIX \
        -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
        -DCMAKE_PREFIX_PATH=$CONDA_PREFIX \
        -DDART_BUILD_PROFILE=OFF \
        -DDART_USE_SYSTEM_GOOGLEBENCHMARK=ON \
        -DDART_USE_SYSTEM_GOOGLETEST=ON \
        -DDART_USE_SYSTEM_IMGUI=ON \
        -DDART_USE_SYSTEM_TRACY=ON \
        -DDART_VERBOSE=$DART_VERBOSE
""", env = { DART_VERBOSE = "OFF", BUILD_TYPE = "Release" } }

tracy = { cmd = "tracy-profiler" }

# Python package build
build-py = { cmd = "pip install . -v", env = { CMAKE_ARGS = "-DDART_BUILD_DARTPY=ON -DDART_ENABLE_SIMD=OFF -DDART_BUILD_WHEELS=ON -DDART_TREAT_WARNINGS_AS_ERRORS=OFF -DBUILD_SHARED_LIBS=OFF -DDART_SKIP_pagmo=ON" } }

# Generate Python stub files for dartpy module (for IDE support)
generate-stubs = { cmd = "python scripts/generate_stubs.py", depends-on = [
    "build-py-dev",
], env = { BUILD_TYPE = "Release", PYTHONPATH = "build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE/python/dartpy" } }

# Build Read the Docs documentation (user guides, tutorials, developer docs)
# No longer requires dartpy since API docs are on GitHub Pages
docs-build = { cmd = """
    cd docs/readthedocs && sphinx-build -b html . _build/html
""" }

# Build Korean documentation with Python API (using stub files via autoapi)
docs-build-ko = { cmd = "cd docs/readthedocs && sphinx-build -b html -D language=ko . _build/html/ko" }

# Serve English documentation
docs-serve = { cmd = """
    pkill -f 'python.*http.server.*8000' || true && \
    python -m http.server --directory docs/readthedocs/_build/html 8000
""", depends-on = ["docs-build"] }

# Serve Korean documentation
docs-serve-ko = { cmd = """
    pkill -f 'python.*http.server.*8001' || true && \
    python -m http.server --directory docs/readthedocs/_build/html/ko 8001
""", depends-on = ["docs-build-ko"] }

docs-clean = { cmd = """
    rm -rf docs/readthedocs/_build
""" }

# Build C++ API documentation (Doxygen)
api-docs-cpp = { cmd = """
    cmake --build build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE --target docs
""", depends-on = ["config"], env = { BUILD_TYPE = "Release" } }

# Build Python API documentation (Sphinx)
api-docs-py = { cmd = """
    export PYTHONPATH="$PWD/build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE/python/dartpy:$PYTHONPATH" && \
    cd docs/python_api && \
    rm -rf _build && \
    sphinx-build -b html . _build/html
""", depends-on = ["build-py-dev"], env = { BUILD_TYPE = "Release" } }

# Build both C++ and Python API docs locally
api-docs-build = { depends-on = ["api-docs-cpp", "api-docs-py"] }

# Serve C++ API documentation
api-docs-serve-cpp = { cmd = """
    echo "C++ API documentation at: http://localhost:8002" && \
    python -m http.server --directory build/$PIXI_ENVIRONMENT_NAME/cpp/$BUILD_TYPE/docs/doxygen/html 8002
""", depends-on = ["api-docs-cpp"], env = { BUILD_TYPE = "Release" } }

# Serve Python API documentation
api-docs-serve-py = { cmd = """
    echo "Python API documentation at: http://localhost:8003" && \
    python -m http.server --directory docs/python_api/_build/html 8003
""", depends-on = ["api-docs-py"] }

# Test the full GitHub Pages API doc build process locally (WARNING: clones full repo)
api-docs-test-gh = { cmd = """
    python scripts/build_docs.py build --verbose
""" }

# Clean GitHub Pages API doc build artifacts
api-docs-clean-gh = { cmd = """
    python scripts/build_docs.py clean
""" }

# Serve GitHub Pages API docs locally (after api-docs-test-gh)
api-docs-serve-gh = { cmd = """
    echo "GitHub Pages API documentation at: http://localhost:8004" && \
    python -m http.server --directory gh-pages 8004
""" }

test-all = { cmd = """
    python scripts/test_all.py
""" }

# Docker build tasks - Test Docker images locally
# Requires Docker to be installed on the system
# Usage:
#   pixi run docker-build                              # Build all Ubuntu versions
#   pixi run docker-build-ubuntu distro=jammy          # Build specific distro
#   pixi run docker-build-manylinux                    # Build manylinux image
docker-build = { cmd = "python scripts/build_docker.py all" }

docker-build-ubuntu = { cmd = "python scripts/build_docker.py ubuntu $DISTRO", env = { DISTRO = "jammy" } }

docker-build-manylinux = { cmd = "python scripts/build_docker.py manylinux" }

################################################################################
# linux-64
################################################################################

[target.linux-64.build-dependencies]
lcov = ">=1.16,<2"

[target.linux-64.dependencies]
freeglut = ">=3.2.2,<3.3"

################################################################################
# osx-64
################################################################################

[target.osx-64.build-dependencies]
git = ">=2.40.0"

[target.osx-64.dependencies]

[target.osx-64.tasks]
download-osg = { cmd = """
    rm -rf .deps/OpenSceneGraph/ && \
    git clone https://github.com/openscenegraph/OpenSceneGraph.git .deps/OpenSceneGraph && \
    cd .deps/OpenSceneGraph && \
    git checkout 2e4ae2ea94595995c1fc56860051410b0c0be605
""", outputs = [".deps/OpenSceneGraph/README.md"] }

config-osg = { cmd = """
    cmake \
        -G Ninja \
        -S .deps/OpenSceneGraph \
        -B .deps/OpenSceneGraph/build \
        -DCMAKE_INSTALL_PREFIX=$CONDA_PREFIX \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_PREFIX_PATH=$CONDA_PREFIX \
        -DCMAKE_POLICY_VERSION_MINIMUM=3.5 \
        -DBUILD_OSG_APPLICATIONS=OFF \
        -DBUILD_OSG_EXAMPLES=OFF
""", depends-on = ["download-osg"] }

build-osg = { cmd = "cmake --build .deps/OpenSceneGraph/build -j", depends-on = ["config-osg"] }

install-osg = { cmd = "cmake --install .deps/OpenSceneGraph/build", depends-on = ["build-osg"] }

################################################################################
# osx-arm64
################################################################################

[target.osx-arm64.build-dependencies]
git = ">=2.40.0"

[target.osx-arm64.dependencies]

[target.osx-arm64.tasks]
download-osg = { cmd = """
    rm -rf .deps/OpenSceneGraph/ && \
    git clone https://github.com/openscenegraph/OpenSceneGraph.git .deps/OpenSceneGraph && \
    cd .deps/OpenSceneGraph && \
    git checkout 2e4ae2ea94595995c1fc56860051410b0c0be605
""", outputs = [".deps/OpenSceneGraph/README.md"] }

config-osg = { cmd = """
    cmake \
        -G Ninja \
        -S .deps/OpenSceneGraph \
        -B .deps/OpenSceneGraph/build \
        -DCMAKE_INSTALL_PREFIX=$CONDA_PREFIX \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_PREFIX_PATH=$CONDA_PREFIX \
        -DCMAKE_POLICY_VERSION_MINIMUM=3.5 \
        -DBUILD_OSG_APPLICATIONS=OFF \
        -DBUILD_OSG_EXAMPLES=OFF
""", depends-on = ["download-osg"] }

build-osg = { cmd = "cmake --build .deps/OpenSceneGraph/build -j", depends-on = ["config-osg"] }

install-osg = { cmd = "cmake --install .deps/OpenSceneGraph/build", depends-on = ["build-osg"] }

################################################################################
# win-64
################################################################################

[target.win-64.dependencies]
freeglut = ">=3.2.2"

[target.win-64.tasks]
config = { cmd = """
    cmake \
        -S . \
        -B build/$PIXI_ENVIRONMENT_NAME/cpp \
        -G 'Visual Studio 17 2022' \
        -DBUILD_SHARED_LIBS=OFF \
        -DCMAKE_INSTALL_PREFIX=$CONDA_PREFIX \
        -DCMAKE_PREFIX_PATH=$CONDA_PREFIX \
        -DDART_BUILD_PROFILE=ON \
        -DDART_MSVC_DEFAULT_OPTIONS=ON \
        -DDART_USE_SYSTEM_GOOGLEBENCHMARK=ON \
        -DDART_USE_SYSTEM_GOOGLETEST=ON \
        -DDART_USE_SYSTEM_IMGUI=ON \
        -DDART_USE_SYSTEM_TRACY=ON \
        -DDART_VERBOSE=$DART_VERBOSE
""", env = { DART_VERBOSE = "OFF" } }

lint-py = { cmd = """
    black . --extend-exclude '/\\.[^/]+' && isort . --skip-glob '.*'
""" }

lint = { depends-on = ["lint-py"] }

check-lint-py = { cmd = """
    black . --check --extend-exclude '/\\.[^/]+' && isort . --check --skip-glob '.*'
""" }

check-lint = { depends-on = ["check-lint-py"] }

build = { cmd = """
    cmake \
        --build build/$PIXI_ENVIRONMENT_NAME/cpp \
        --config $BUILD_TYPE \
        -j
""", depends-on = ["config"], env = { BUILD_TYPE = "Release" } }

build-tests = { cmd = """
    cmake \
        --build build/$PIXI_ENVIRONMENT_NAME/cpp \
        --config $BUILD_TYPE \
        -j \
        --target tests
""", depends-on = ["config"], env = { BUILD_TYPE = "Release" } }

build-py-dev = { cmd = """
    cmake \
        --build build/$PIXI_ENVIRONMENT_NAME/cpp \
        --config $BUILD_TYPE \
        -j \
        --target dartpy
""", depends-on = ["config-py"], env = { BUILD_TYPE = "Release" } }

config-py = { cmd = """
    cmake \
        -S . \
        -B build/$PIXI_ENVIRONMENT_NAME/cpp \
        -G 'Visual Studio 17 2022' \
        -DBUILD_SHARED_LIBS=OFF \
        -DCMAKE_INSTALL_PREFIX=$CONDA_PREFIX \
        -DCMAKE_PREFIX_PATH=$CONDA_PREFIX \
        -DDART_BUILD_DARTPY=ON \
        -DDART_BUILD_PROFILE=ON \
        -DDART_MSVC_DEFAULT_OPTIONS=ON \
        -DDART_USE_SYSTEM_GOOGLEBENCHMARK=ON \
        -DDART_USE_SYSTEM_GOOGLETEST=ON \
        -DDART_USE_SYSTEM_IMGUI=ON \
        -DDART_USE_SYSTEM_TRACY=ON \
        -DDART_VERBOSE=$DART_VERBOSE
""", env = { DART_VERBOSE = "OFF" } }

test = { cmd = """
    ctest \
        --test-dir build/$PIXI_ENVIRONMENT_NAME/cpp \
        --build-config $BUILD_TYPE \
        --output-on-failure
""", depends-on = ["build-tests"], env = { BUILD_TYPE = "Release" } }

test-py = { cmd = """
    cmake \
        --build build/$PIXI_ENVIRONMENT_NAME/cpp \
        --config $BUILD_TYPE \
        -j \
        --target pytest
""", depends-on = ["config"], env = { BUILD_TYPE = "Release" } }

test-all = { cmd = """
    cmake \
        --build build/$PIXI_ENVIRONMENT_NAME/cpp \
        --config $BUILD_TYPE \
        -j \
        --target ALL
""", depends-on = ["config"], env = { BUILD_TYPE = "Release" } }

tu-biped = { cmd = """
    cmake \
        --build build/$PIXI_ENVIRONMENT_NAME/cpp \
        --config $BUILD_TYPE \
        --target tutorial_biped \
        --parallel \
    && build/$BUILD_TYPE/tutorial_biped.exe
""", depends-on = ["config"], env = { BUILD_TYPE = "Release" } }

tu-biped-fi = { cmd = """
    cmake \
        --build build/$PIXI_ENVIRONMENT_NAME/cpp \
        --config $BUILD_TYPE \
        --target tutorial_biped_finished \
        --parallel \
    && build/$BUILD_TYPE/tutorial_biped.exe
""", depends-on = ["config"], env = { BUILD_TYPE = "Release" } }

tu-collisions = { cmd = """
    cmake \
        --build build/$PIXI_ENVIRONMENT_NAME/cpp \
        --config $BUILD_TYPE \
        --target tutorial_collisions \
        --parallel \
    && build/$BUILD_TYPE/tutorial_collisions.exe
""", depends-on = ["config"], env = { BUILD_TYPE = "Release" } }

tu-collisions-fi = { cmd = """
    cmake \
        --build build/$PIXI_ENVIRONMENT_NAME/cpp \
        --config $BUILD_TYPE \
        --target tutorial_collisions_finished \
        --parallel \
    && build/$BUILD_TYPE/tutorial_collisions.exe
""", depends-on = ["config"], env = { BUILD_TYPE = "Release" } }

tu-dominoes = { cmd = """
    cmake \
        --build build/$PIXI_ENVIRONMENT_NAME/cpp \
        --config $BUILD_TYPE \
        --target tutorial_dominoes \
        --parallel \
    && build/$BUILD_TYPE/tutorial_dominoes.exe
""", depends-on = ["config"], env = { BUILD_TYPE = "Release" } }

tu-dominoes-fi = { cmd = """
    cmake \
        --build build/$PIXI_ENVIRONMENT_NAME/cpp \
        --config $BUILD_TYPE \
        --target tutorial_dominoes_finished \
        --parallel \
    && build/$BUILD_TYPE/tutorial_dominoes.exe
""", depends-on = ["config"], env = { BUILD_TYPE = "Release" } }

tu-multi-pendulum = { cmd = """
    cmake \
        --build build/$PIXI_ENVIRONMENT_NAME/cpp \
        --config $BUILD_TYPE \
        --target tutorial_multi_pendulum \
        --parallel \
    && build/$BUILD_TYPE/tutorial_multi_pendulum.exe
""", depends-on = ["config"], env = { BUILD_TYPE = "Release" } }

tu-multi-pendulum-fi = { cmd = """
    cmake \
        --build build/$PIXI_ENVIRONMENT_NAME/cpp \
        --config $BUILD_TYPE \
        --target tutorial_multi_pendulum_finished \
        --parallel \
    && build/$BUILD_TYPE/tutorial_multi_pendulum.exe
""", depends-on = ["config"], env = { BUILD_TYPE = "Release" } }

install = { cmd = """
    cmake \
        --build build/$PIXI_ENVIRONMENT_NAME/cpp \
        --config $BUILD_TYPE \
        -j \
        --target install
""", depends-on = ["config-install"], env = { BUILD_TYPE = "Release" } }

config-install = { cmd = """
    cmake \
        -S . \
        -B build/$PIXI_ENVIRONMENT_NAME/cpp \
        -G 'Visual Studio 17 2022' \
        -DCMAKE_INSTALL_PREFIX=$CONDA_PREFIX \
        -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
        -DCMAKE_PREFIX_PATH=$CONDA_PREFIX \
        -DDART_BUILD_PROFILE=OFF \
        -DDART_MSVC_DEFAULT_OPTIONS=ON \
        -DDART_USE_SYSTEM_GOOGLEBENCHMARK=ON \
        -DDART_USE_SYSTEM_GOOGLETEST=ON \
        -DDART_USE_SYSTEM_IMGUI=ON \
        -DDART_USE_SYSTEM_TRACY=ON \
        -DDART_VERBOSE=$DART_VERBOSE
""", env = { DART_VERBOSE = "OFF", BUILD_TYPE = "Release" } }

tracy = { cmd = "tracy-profiler.exe" }

#=================
# Feature: Gazebo
#=================
#
# Gazebo Physics Integration Testing
#
# This feature tests DART integration with Gazebo Physics (gz-physics) by:
# 1. Downloading gz-physics from source (gz-physics8_8.0.0 branch)
# 2. Patching CMakeLists.txt to accept DART 7.0 (was hardcoded to 6.10)
# 3. Building gz-physics with the dartsim plugin
# 4. Verifying the dartsim plugin links against DART libraries
#
# Usage (single command runs entire chain):
#   pixi run -e gazebo test-gz
#
# The dependency chain automatically executes:
#   test-gz → build-gz → config-gz → patch-gz → download-gz
#
# Individual tasks can also be run separately if needed:
#   pixi run -e gazebo download-gz  # Download gz-physics source
#   pixi run -e gazebo patch-gz     # Patch DART version requirement
#   pixi run -e gazebo config-gz    # Configure CMake build
#   pixi run -e gazebo build-gz     # Build gz-physics + dartsim plugin
#   pixi run -e gazebo test-gz      # Verify DART integration
#

[feature.gazebo]
channels = ["conda-forge"]
platforms = ["linux-64", "osx-64", "osx-arm64", "win-64"]

[feature.gazebo.build-dependencies]
git = ">=1"

[feature.gazebo.dependencies]
libgz-cmake4 = ">=4.0.0"
libgz-plugin3 = ">=3.0.0"
libgz-math8 = ">=8.0.0"
libgz-common6 = ">=6.0.0"
libgz-utils2 = ">=2.0.0"
libsdformat15 = ">=15.0.0"
eigen = ">=3.4.0"
assimp = ">=5.4.3"
libode = ">=0.16.2"
bullet-cpp = ">=3.25"

[feature.gazebo.tasks]
download-gz = { cmd = """
    rm -rf .deps/gz-physics/ \
    && git clone --branch gz-physics8_8.0.0 https://github.com/gazebosim/gz-physics .deps/gz-physics
    """, outputs = [
    ".deps/gz-physics/README.md",
] }

patch-gz = { cmd = "python3 scripts/patch_gz_physics.py", depends-on = ["download-gz"] }

config-gz = { cmd = """
    cmake \
        -G Ninja \
        -S .deps/gz-physics \
        -B .deps/gz-physics/build \
        -DCMAKE_INSTALL_PREFIX=$CONDA_PREFIX \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_PREFIX_PATH=$CONDA_PREFIX \
        -DBUILD_TESTING=OFF
""", depends-on = ["patch-gz", "install"] }

build-gz = { cmd = "cmake --build .deps/gz-physics/build -j --target all", depends-on = [
    "config-gz",
] }

test-gz = { cmd = "bash -c 'cd .deps/gz-physics/build/lib && (otool -L libgz-physics8-dartsim-plugin*.dylib 2>/dev/null || ldd libgz-physics8-dartsim-plugin.so 2>/dev/null) | grep dart && echo \"✓ DART plugin built successfully with DART integration!\"'", depends-on = [
    "build-gz",
], env = { LD_LIBRARY_PATH = "$CONDA_PREFIX/lib:$LD_LIBRARY_PATH" } }

#==============
# Environments
#==============

[environments]
gazebo = ["gazebo"]
