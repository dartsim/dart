/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class aiScene : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal aiScene(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(aiScene obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~aiScene() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          AssimpPINVOKE.delete_aiScene(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public aiAnimationVector mAnimations { get { return GetmAnimations(); } }
  public aiCameraVector mCameras { get { return GetmCameras(); } }
  public aiLightVector mLights { get { return GetmLights(); } }
  public aiMaterialVector mMaterials { get { return GetmMaterials(); } }
  public aiMeshVector mMeshes { get { return GetmMeshes(); } }
  public aiTextureVector mTextures { get { return GetmTextures(); } }

  public uint mFlags {
    set {
      AssimpPINVOKE.aiScene_mFlags_set(swigCPtr, value);
    } 
    get {
      uint ret = AssimpPINVOKE.aiScene_mFlags_get(swigCPtr);
      return ret;
    } 
  }

  public aiNode mRootNode {
    set {
      AssimpPINVOKE.aiScene_mRootNode_set(swigCPtr, aiNode.getCPtr(value));
    } 
    get {
      IntPtr cPtr = AssimpPINVOKE.aiScene_mRootNode_get(swigCPtr);
      aiNode ret = (cPtr == IntPtr.Zero) ? null : new aiNode(cPtr, false);
      return ret;
    } 
  }

  public uint mNumMeshes {
    set {
      AssimpPINVOKE.aiScene_mNumMeshes_set(swigCPtr, value);
    } 
    get {
      uint ret = AssimpPINVOKE.aiScene_mNumMeshes_get(swigCPtr);
      return ret;
    } 
  }

  public uint mNumMaterials {
    set {
      AssimpPINVOKE.aiScene_mNumMaterials_set(swigCPtr, value);
    } 
    get {
      uint ret = AssimpPINVOKE.aiScene_mNumMaterials_get(swigCPtr);
      return ret;
    } 
  }

  public uint mNumAnimations {
    set {
      AssimpPINVOKE.aiScene_mNumAnimations_set(swigCPtr, value);
    } 
    get {
      uint ret = AssimpPINVOKE.aiScene_mNumAnimations_get(swigCPtr);
      return ret;
    } 
  }

  public uint mNumTextures {
    set {
      AssimpPINVOKE.aiScene_mNumTextures_set(swigCPtr, value);
    } 
    get {
      uint ret = AssimpPINVOKE.aiScene_mNumTextures_get(swigCPtr);
      return ret;
    } 
  }

  public uint mNumLights {
    set {
      AssimpPINVOKE.aiScene_mNumLights_set(swigCPtr, value);
    } 
    get {
      uint ret = AssimpPINVOKE.aiScene_mNumLights_get(swigCPtr);
      return ret;
    } 
  }

  public uint mNumCameras {
    set {
      AssimpPINVOKE.aiScene_mNumCameras_set(swigCPtr, value);
    } 
    get {
      uint ret = AssimpPINVOKE.aiScene_mNumCameras_get(swigCPtr);
      return ret;
    } 
  }

  public aiScene() : this(AssimpPINVOKE.new_aiScene(), true) {
  }

  public bool HasMeshes() {
    bool ret = AssimpPINVOKE.aiScene_HasMeshes(swigCPtr);
    return ret;
  }

  public bool HasMaterials() {
    bool ret = AssimpPINVOKE.aiScene_HasMaterials(swigCPtr);
    return ret;
  }

  public bool HasLights() {
    bool ret = AssimpPINVOKE.aiScene_HasLights(swigCPtr);
    return ret;
  }

  public bool HasTextures() {
    bool ret = AssimpPINVOKE.aiScene_HasTextures(swigCPtr);
    return ret;
  }

  public bool HasCameras() {
    bool ret = AssimpPINVOKE.aiScene_HasCameras(swigCPtr);
    return ret;
  }

  public bool HasAnimations() {
    bool ret = AssimpPINVOKE.aiScene_HasAnimations(swigCPtr);
    return ret;
  }

  private aiAnimationVector GetmAnimations() {
    IntPtr cPtr = AssimpPINVOKE.aiScene_GetmAnimations(swigCPtr);
    aiAnimationVector ret = (cPtr == IntPtr.Zero) ? null : new aiAnimationVector(cPtr, true);
    return ret;
  }

  private aiCameraVector GetmCameras() {
    IntPtr cPtr = AssimpPINVOKE.aiScene_GetmCameras(swigCPtr);
    aiCameraVector ret = (cPtr == IntPtr.Zero) ? null : new aiCameraVector(cPtr, true);
    return ret;
  }

  private aiLightVector GetmLights() {
    IntPtr cPtr = AssimpPINVOKE.aiScene_GetmLights(swigCPtr);
    aiLightVector ret = (cPtr == IntPtr.Zero) ? null : new aiLightVector(cPtr, true);
    return ret;
  }

  private aiMaterialVector GetmMaterials() {
    IntPtr cPtr = AssimpPINVOKE.aiScene_GetmMaterials(swigCPtr);
    aiMaterialVector ret = (cPtr == IntPtr.Zero) ? null : new aiMaterialVector(cPtr, true);
    return ret;
  }

  private aiMeshVector GetmMeshes() {
    IntPtr cPtr = AssimpPINVOKE.aiScene_GetmMeshes(swigCPtr);
    aiMeshVector ret = (cPtr == IntPtr.Zero) ? null : new aiMeshVector(cPtr, true);
    return ret;
  }

  private aiTextureVector GetmTextures() {
    IntPtr cPtr = AssimpPINVOKE.aiScene_GetmTextures(swigCPtr);
    aiTextureVector ret = (cPtr == IntPtr.Zero) ? null : new aiTextureVector(cPtr, true);
    return ret;
  }

}
