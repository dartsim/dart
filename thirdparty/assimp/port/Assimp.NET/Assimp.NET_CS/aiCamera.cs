/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class aiCamera : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal aiCamera(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(aiCamera obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~aiCamera() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          AssimpPINVOKE.delete_aiCamera(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public aiString mName {
    set {
      AssimpPINVOKE.aiCamera_mName_set(swigCPtr, aiString.getCPtr(value));
    } 
    get {
      IntPtr cPtr = AssimpPINVOKE.aiCamera_mName_get(swigCPtr);
      aiString ret = (cPtr == IntPtr.Zero) ? null : new aiString(cPtr, false);
      return ret;
    } 
  }

  public aiVector3D mPosition {
    set {
      AssimpPINVOKE.aiCamera_mPosition_set(swigCPtr, aiVector3D.getCPtr(value));
    } 
    get {
      IntPtr cPtr = AssimpPINVOKE.aiCamera_mPosition_get(swigCPtr);
      aiVector3D ret = (cPtr == IntPtr.Zero) ? null : new aiVector3D(cPtr, false);
      return ret;
    } 
  }

  public aiVector3D mUp {
    set {
      AssimpPINVOKE.aiCamera_mUp_set(swigCPtr, aiVector3D.getCPtr(value));
    } 
    get {
      IntPtr cPtr = AssimpPINVOKE.aiCamera_mUp_get(swigCPtr);
      aiVector3D ret = (cPtr == IntPtr.Zero) ? null : new aiVector3D(cPtr, false);
      return ret;
    } 
  }

  public aiVector3D mLookAt {
    set {
      AssimpPINVOKE.aiCamera_mLookAt_set(swigCPtr, aiVector3D.getCPtr(value));
    } 
    get {
      IntPtr cPtr = AssimpPINVOKE.aiCamera_mLookAt_get(swigCPtr);
      aiVector3D ret = (cPtr == IntPtr.Zero) ? null : new aiVector3D(cPtr, false);
      return ret;
    } 
  }

  public float mHorizontalFOV {
    set {
      AssimpPINVOKE.aiCamera_mHorizontalFOV_set(swigCPtr, value);
    } 
    get {
      float ret = AssimpPINVOKE.aiCamera_mHorizontalFOV_get(swigCPtr);
      return ret;
    } 
  }

  public float mClipPlaneNear {
    set {
      AssimpPINVOKE.aiCamera_mClipPlaneNear_set(swigCPtr, value);
    } 
    get {
      float ret = AssimpPINVOKE.aiCamera_mClipPlaneNear_get(swigCPtr);
      return ret;
    } 
  }

  public float mClipPlaneFar {
    set {
      AssimpPINVOKE.aiCamera_mClipPlaneFar_set(swigCPtr, value);
    } 
    get {
      float ret = AssimpPINVOKE.aiCamera_mClipPlaneFar_get(swigCPtr);
      return ret;
    } 
  }

  public float mAspect {
    set {
      AssimpPINVOKE.aiCamera_mAspect_set(swigCPtr, value);
    } 
    get {
      float ret = AssimpPINVOKE.aiCamera_mAspect_get(swigCPtr);
      return ret;
    } 
  }

  public aiCamera() : this(AssimpPINVOKE.new_aiCamera(), true) {
  }

  public void GetCameraMatrix(aiMatrix4x4 arg0) {
    AssimpPINVOKE.aiCamera_GetCameraMatrix(swigCPtr, aiMatrix4x4.getCPtr(arg0));
    if (AssimpPINVOKE.SWIGPendingException.Pending) throw AssimpPINVOKE.SWIGPendingException.Retrieve();
  }

}
