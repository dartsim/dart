from __future__ import annotations
import typing
__all__: list[str] = ['Composite', 'LocalResource', 'LocalResourceRetriever', 'Observer', 'Resource', 'ResourceRetriever', 'Stopwatch', 'Subject', 'Uri', 'debug', 'error', 'fatal', 'info', 'split', 'tic', 'toLower', 'toUpper', 'toc', 'tocMS', 'tocNS', 'tocS', 'tocUS', 'trace', 'trim', 'trimLeft', 'trimRight', 'warn']
class Composite:
    def __init__(self) -> None:
        ...
    def copyCompositePropertiesTo(self, outgoingProperties: ..., std: ..., std: ..., std: ..., std: ..., std: ..., std: ..., dart: ...) -> None:
        ...
    def copyCompositeStateTo(self, outgoingStates: ..., std: ..., std: ..., std: ..., std: ..., std: ..., std: ..., dart: ...) -> None:
        ...
    def duplicateAspects(self, fromComposite: Composite) -> None:
        ...
    def getCompositeProperties(self) -> ...:
        ...
    def getCompositeState(self) -> ...:
        ...
    def matchAspects(self, otherComposite: Composite) -> None:
        ...
    def setCompositeProperties(self, newProperties: ..., std: ..., std: ..., std: ..., std: ..., std: ..., std: ..., dart: ...) -> None:
        ...
    def setCompositeState(self, newStates: ..., std: ..., std: ..., std: ..., std: ..., std: ..., std: ..., dart: ...) -> None:
        ...
class LocalResource(Resource):
    def __init__(self, path: str) -> None:
        ...
    def isGood(self) -> bool:
        ...
class LocalResourceRetriever(ResourceRetriever):
    def __init__(self) -> None:
        ...
class Observer:
    pass
class Resource:
    def getSize(self) -> int:
        ...
    def read(self, buffer: capsule, size: int, count: int) -> int:
        ...
    def readAll(self) -> str:
        ...
    def seek(self, offset: int, origin: ...) -> bool:
        ...
    def tell(self) -> int:
        ...
class ResourceRetriever:
    def exists(self, uri: Uri) -> bool:
        ...
    def getFilePath(self, uri: Uri) -> str:
        ...
    def readAll(self, uri: Uri) -> str:
        ...
    def retrieve(self, uri: Uri) -> Resource:
        ...
class Stopwatch:
    def __init__(self, start: bool = True) -> None:
        ...
    def elapsedMS(self) -> float:
        ...
    def elapsedNS(self) -> float:
        ...
    def elapsedS(self) -> float:
        ...
    def elapsedUS(self) -> float:
        ...
    def isStarted(self) -> bool:
        ...
    def print(self) -> None:
        ...
    def reset(self) -> None:
        ...
    def start(self) -> None:
        ...
    def stop(self) -> None:
        ...
class Subject:
    pass
class Uri:
    mAuthority: ...
    mFragment: ...
    mPath: ...
    mQuery: ...
    mScheme: ...
    @staticmethod
    def createFromPath(path: str) -> Uri:
        ...
    @staticmethod
    @typing.overload
    def createFromRelativeUri(base: str, relative: str) -> Uri:
        ...
    @staticmethod
    @typing.overload
    def createFromRelativeUri(base: str, relative: str, strict: bool) -> Uri:
        ...
    @staticmethod
    @typing.overload
    def createFromRelativeUri(base: Uri, relative: str) -> Uri:
        ...
    @staticmethod
    @typing.overload
    def createFromRelativeUri(base: Uri, relative: str, strict: bool) -> Uri:
        ...
    @staticmethod
    @typing.overload
    def createFromRelativeUri(base: Uri, relative: Uri) -> Uri:
        ...
    @staticmethod
    @typing.overload
    def createFromRelativeUri(base: Uri, relative: Uri, strict: bool) -> Uri:
        ...
    @staticmethod
    def createFromString(input: str) -> Uri:
        ...
    @staticmethod
    def createFromStringOrPath(input: str) -> Uri:
        ...
    @staticmethod
    @typing.overload
    def getRelativeUri(base: str, relative: str) -> str:
        ...
    @staticmethod
    @typing.overload
    def getRelativeUri(base: str, relative: str, strict: bool) -> str:
        ...
    @staticmethod
    @typing.overload
    def getRelativeUri(base: Uri, relative: str) -> str:
        ...
    @staticmethod
    @typing.overload
    def getRelativeUri(base: Uri, relative: str, strict: bool) -> str:
        ...
    @staticmethod
    @typing.overload
    def getRelativeUri(base: Uri, relative: Uri) -> str:
        ...
    @staticmethod
    @typing.overload
    def getRelativeUri(base: Uri, relative: Uri, strict: bool) -> str:
        ...
    @staticmethod
    def getUri(input: str) -> str:
        ...
    @typing.overload
    def __init__(self) -> None:
        ...
    @typing.overload
    def __init__(self, input: str) -> None:
        ...
    @typing.overload
    def __init__(self, input: str) -> None:
        ...
    def clear(self) -> None:
        ...
    def fromPath(self, path: str) -> bool:
        ...
    @typing.overload
    def fromRelativeUri(self, base: str, relative: str) -> bool:
        ...
    @typing.overload
    def fromRelativeUri(self, base: str, relative: str, strict: bool) -> bool:
        ...
    @typing.overload
    def fromRelativeUri(self, base: str, relative: str) -> bool:
        ...
    @typing.overload
    def fromRelativeUri(self, base: str, relative: str, strict: bool) -> bool:
        ...
    @typing.overload
    def fromRelativeUri(self, base: Uri, relative: str) -> bool:
        ...
    @typing.overload
    def fromRelativeUri(self, base: Uri, relative: str, strict: bool) -> bool:
        ...
    @typing.overload
    def fromRelativeUri(self, base: Uri, relative: str) -> bool:
        ...
    @typing.overload
    def fromRelativeUri(self, base: Uri, relative: str, strict: bool) -> bool:
        ...
    @typing.overload
    def fromRelativeUri(self, base: Uri, relative: Uri) -> bool:
        ...
    @typing.overload
    def fromRelativeUri(self, base: Uri, relative: Uri, strict: bool) -> bool:
        ...
    def fromString(self, input: str) -> bool:
        ...
    def fromStringOrPath(self, input: str) -> bool:
        ...
    def getFilesystemPath(self) -> str:
        ...
    def getPath(self) -> str:
        ...
    def toString(self) -> str:
        ...
def debug(arg0: str) -> None:
    ...
def error(arg0: str) -> None:
    ...
def fatal(arg0: str) -> None:
    ...
def info(arg0: str) -> None:
    ...
def split(str: str, delimiters: str = ' \n\r\t') -> list[str]:
    ...
def tic() -> None:
    ...
def toLower(str: str) -> str:
    ...
def toUpper(str: str) -> str:
    ...
def toc(print: bool = False) -> float:
    ...
def tocMS(print: bool = False) -> float:
    ...
def tocNS(print: bool = False) -> float:
    ...
def tocS(print: bool = False) -> float:
    ...
def tocUS(print: bool = False) -> float:
    ...
def trace(arg0: str) -> None:
    ...
def trim(str: str, whitespaces: str = ' \n\r\t') -> str:
    ...
def trimLeft(str: str, whitespaces: str = ' \n\r\t') -> str:
    ...
def trimRight(str: str, whitespaces: str = ' \n\r\t') -> str:
    ...
def warn(arg0: str) -> None:
    ...
